name: Django Pytest CI
# See https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers

on:
  push:
    branches: [ "main", "pilot" ]
  pull_request:
    branches: [ "main", "pilot" ] 

defaults:
  run:
    shell: bash 
    working-directory: ./django
 
jobs:
  # Label of the container job
  test-coverage:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `test-coverage` executes in
    container: python:3.11

    permissions:
      # See https://github.com/py-cov-action/python-coverage-comment-action#basic-usage
      pull-requests: write
      contents: write

    services:
      # Label used to access the service container
      postgres-service:
        # Docker Hub image
        image: pgvector/pgvector:pg16
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: otto
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:7.0.15-alpine3.20
        ports:
          - 6379:6379
    env:
      AZURE_OPENAI_KEY: ${{secrets.AZURE_OPENAI_KEY}}
      AZURE_COGNITIVE_SERVICE_KEY: ${{secrets.AZURE_COGNITIVE_SERVICE_KEY}}
      DJANGODB_HOST: postgres-service
      VECTORDB_HOST: postgres-service
      LOG_LEVEL: ERROR      
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y postgresql-client poppler-utils
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
    - name: Run tests
      working-directory: ./
      run: |
        celery -A otto worker -l INFO --pool=gevent --concurrency=256 &
        python -m coverage run --source=django -m pytest django
    - name: Display coverage
      working-directory: ./
      run: |
        python -m coverage report -m
    - name: Coverage comment
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Store Pull Request comment to be posted
      uses: actions/upload-artifact@v4
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        name: python-coverage-comment-action
        path: python-coverage-comment-action.txt
