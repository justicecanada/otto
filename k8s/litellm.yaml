apiVersion: v1
kind: ConfigMap
metadata:
  name: litellm-config
  namespace: otto
  labels:
    app: litellm
  # This ConfigMap contains the litellm_config.yaml file contents

data:
  config.yaml: |
    # BEGIN litellm_config.yaml
    model_list:
      - model_name: gpt-4o
        litellm_params:
          model: azure/gpt-4o
          api_base: os.environ/AZURE_OPENAI_ENDPOINT
          api_key: os.environ/AZURE_OPENAI_KEY
          api_version: os.environ/AZURE_OPENAI_VERSION
      - model_name: gpt-4.1
        litellm_params:
          model: azure/gpt-4.1
          api_base: os.environ/AZURE_OPENAI_ENDPOINT
          api_key: os.environ/AZURE_OPENAI_KEY
          api_version: os.environ/AZURE_OPENAI_VERSION
      - model_name: o3-mini
        litellm_params:
          model: azure/o3-mini
          api_base: os.environ/AZURE_OPENAI_ENDPOINT
          api_key: os.environ/AZURE_OPENAI_KEY
          api_version: os.environ/AZURE_OPENAI_VERSION
      - model_name: gpt-4o-mini
        litellm_params:
          model: azure/gpt-4o-mini
          api_base: os.environ/AZURE_OPENAI_ENDPOINT
          api_key: os.environ/AZURE_OPENAI_KEY
          api_version: os.environ/AZURE_OPENAI_VERSION
      - model_name: text-embedding-3-large
        litellm_params:
          model: azure/text-embedding-3-large
          api_base: os.environ/AZURE_OPENAI_ENDPOINT
          api_key: os.environ/AZURE_OPENAI_KEY
          api_version: os.environ/AZURE_OPENAI_VERSION

    general_settings:
      master_key: sk-1234
      database_url: os.environ/DATABASE_URL

    litellm_settings:
      ssl_verify: false
      drop_params: true
    # END litellm_config.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: litellm
  namespace: otto
  labels:
    app: litellm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: litellm
  template:
    metadata:
      labels:
        app: litellm
    spec:
      containers:
        - name: litellm
          image: ghcr.io/berriai/litellm:main-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 4000
          command: ["/bin/sh", "-c"]
          # Using VECTORDB to point at the local postgres service
          # since we are using CosmosDB in sandbox.
          # We would use POSTGRES_USER etc. in prod.
          args: [
            "export DATABASE_URL=postgresql://${VECTORDB_USER}:${VECTORDB_PASSWORD}@postgres-service:5432/litellm && exec litellm --config /config.yaml --detailed_debug"
          ]
          volumeMounts:
            - name: config-volume
              mountPath: /config.yaml
              subPath: config.yaml
          envFrom:
            - configMapRef:
                name: otto-configmap
          env:
            - name: VECTORDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: vectordbpasswordkey
                  name: azure-keyvault-secrets
      volumes:
        - name: config-volume
          configMap:
            name: litellm-config
            items:
              - key: config.yaml
                path: config.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: litellm
  namespace: otto
  labels:
    app: litellm
spec:
  type: ClusterIP
  selector:
    app: litellm
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
      name: http
